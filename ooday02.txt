回顾:
1.类和对象
2.创建类、成员变量、方法
3.创建对象
    new Cell();
    Cell c = new Cell();
    c:引用类型变量，简称"引用"
4.访问成员变量、方法
    对象.成员变量
    对象.方法(?);
5.基本类型之间画等号----赋值
  引用类型之间画等号----指向同一个对象
6.null:空，没有指向对象
       不能点，否则空指针异常

8种基本类型:可以直接赋值
除了8种之外:
    类、接口、数组----引用类型
    new出的

1.基本:
    直接赋值
    变量装的就是确切的值
    画等号----赋值
    int num = 5;
2.引用:
    new
    变量装的是地址
    画等号----指向同一个对象


正课:
1.方法的重载
class Aoo{
   void pay(){}
   void pay(double d){}
   void pay(String s1,String s2){}
   void pay(int a,double d){}
   void pay(double d,int a){}

   void pay(int num,double dou){} //错误
   int pay(){} //错误
}

用户:

void println(){}
void printlnString(String str){}
void printlnInt(int n){}
void printlnDouble(double d){}
void printlnBoolean(boolean b){}


System.out.println();
System.out.println("HelloWorld");
System.out.println(111);
System.out.println(5.55);


java建议:
  1个文件只包含1个类

java规定:
  java中一个文件可以包含多个类，
  但是，public的类只能有1个，
  并且，public的类必须与文件名相同


语法:
1.class---成员变量、方法
2.测试类---main(){创建对象}


构造方法:
1.构造方法常常用于给成员变量初始化
2.与类同名，没有返回值类型
3.构造方法是在创建对象时被自动调用
4.若自己不写构造方法，
  则编译器默认给一个无参构造，
  若自己写了，则不再默认提供无参构造
5.构造方法可以重载

this:
1.this指代当前对象，谁调指的就是谁
2.用法:
    this.成员变量---访问成员变量
    this.方法()-----访问方法
    this()--------调构造方法




class Cell{
   int row;
   int col;
   Cell(int row,int col){
      this.row = row;
      this.col = col;
   }
   Cell(int n){
      this(n,n);
   }
   Cell(){
      this(0,0); //调两个int型参数的构造
   }
}












class Cell{
   int row;
   int col;
   Cell(int row,int col){
      this.row = row;
      this.col = col;
   }
   void drop(){
      row++;
      //this.row++;  //相当于c.row++
   }
}
main(){
   Cell cc = new Cell(2,8);
   cc.drop();

   Cell c = new Cell(5,4);//c.row=5,c.col=4
   c.drop();
   System.out.println(c.row); //6

   Cell c = new Cell(5,4);
   Cell cc = new Cell(8,2);
}









class Cell{
   int row;
   int col;
   void drop(){}
   void moveLeft(){}
   String getCellInfo(){}
   
   Cell(){
   }
   Cell(int n){
      row = n;
      col = n;
   }
   Cell(int row,int col){
      this.row = row;
      this.col = col;
   }
}

class CellTest{
   main(){
      Cell c = new Cell();
      Cell c = new Cell(5);
      Cell c = new Cell(5,4);
      Cell c = new Cell();
      c.row = 5;
      c.col = 4;
   }
}


class Student{  //学生类
   String name;
   int age;
   String address;
   void study(){}


   void sayHi(){
      study();
      this.study();

      System.out.println(name+",,,"+age+",,,"+address);
   }

   Student zs = new Student("zhangsan",25,"河北");
   zs.sayHi();

   Student ls = new Student("lisi",26,"黑龙江");
   ls.sayHi();


   Student(){
   }
   Student(String name,int age,String address){
      this.name = name;
      this.age = age;
      this.address = address;
      //this.name---指的是成员变量
      //name--------指的是局部变量/参数
   }
}
class StudentTest{
   main(){
      Student zs = new Student();
      Student zs = new Student("zhangsan",25,"河北");

      Student ls = new Student("lisi",26,"黑龙江");

      Student zs = new Student();
      zs.setInfo("zhangsan",25,"河北");

      Student ls = new Student();
      ls.setInfo("lisi",18,"黑龙江");


      Student zs = new Student();
      zs.name = "zhangsan";
      zs.age = 25;
      zs.address = "河北";

      Student ls = new Student();
      ls.name = "lisi";
      ls.age = 23;
      ls.address = "黑龙江";
   }
}

声明int型数组，名为arr，包含4个元素
arr中的每一个元素都是int类型
int   [] arr = new int[4];---基本类型数组

声明Cell型数组，名为arr，包含4个元素
arr中的每一个元素都是Cell类型
Cell  [] arr = new Cell[4];---引用类型数组

int是数据类型
Cell是数据类型


int    [] arr = new int[4];
boolean[] bs = new boolean[6];
Student[] stus = new Student[100];
Random [] rs = new Random[4];
Scanner[] ss = new Scanner[8];

Hero hero = new Hero(); //英雄机



1.引用类型数组的定义
  Cell[] cs = new Cell[4];
2.引用类型数组的初始化
  1) Cell[] cells = new Cell[4]; //new数组
     cells[0] = new Cell();
     cells[1] = new Cell(2);
     cells[2] = new Cell(5,4);
     cells[3] = new Cell(2,6);
  2) Cell[] cells = {
        new Cell(),
	new Cell(1),
	new Cell(5,4),
	new Cell(2,7)
     };
  3) Cell[] cells = new Cell[]{
        new Cell(),
	new Cell(1),
	new Cell(5,4),
	new Cell(2,7)
     };
     

数组也是一种数据类型

int   []  arr  = new int [4];
Cell  []  cs   = new Cell[4];


声明int[]类型的数组，名为as，包含4个元素
as为数组的数组，里面每一个元素都是int[]类型
每一个元素，默认值为null
as[0]默认值为null
as[0]是int[]类型

int[] []  as = new int[4][];
as[0] = new int[2];
as[1] = new int[4];
as[2] = new int[2];
as[3] = new int[5];


int[][] as = new int[3][];
as[0] = new int[4];
as[1] = new int[4];
as[2] = new int[4];
简写:
int[][] as = new int[3][4];
for(int i=0;i<3;i++){   //行
   for(int j=0;j<4;j++){  //列
      as[i][j] = 100;
   }
}

练习:------全部熟练做下来
1.创建Cell型数组，包含4个元素
  分别对每一个数组元素赋值
2.创建Cell型数组，直接对每一个元素赋值--{ }
3.创建int[]型数组arr，包含3个元素
  第1个元素又包含2个元素
  第2个元素又包含3个元素
  第3个元素又包含2个元素
  将arr的第2个元素中的第1个元素赋值为100
4.创建int[]型数组，为3行4列
  双层循环输出每一个元素的值


1.找对象-----7种图形对象
2.抽类
    class T{}
    class J{}
    class O{}
    class S{}
    class Z{}
    class I{}
    class L{}
3.设计类中的成员变量(特征)、方法(行为)
    class T{
       Cell[] cells;
       T(int row,int col){
          cells = new Cell[4];
	  cells[0] = new Cell(row,col);
	  cells[1] = new Cell(row,col+1);
	  cells[2] = new Cell(row,col+2);
	  cells[3] = new Cell(row+1,col+1);
       }

       void drop(){   //下落一个
          for(int i=0;i<cells.length;i++){
	     cells[i].row++;
	  }
       }
       void moveLeft(){ //左移一个
          for(int i=0;i<cells.length;i++){
	     cells[i].col--;
	  }
       }
       void moveRight(){ //左移一个
          for(int i=0;i<cells.length;i++){
	     cells[i].col++;
	  }
       }
       void print(){  //输出4个格子的坐标
          for(int i=0;i<cells.length;i++){
	     String s = cells[i].getCellInfo();
	     System.out.println(s);
	     
	     System.out.println(cells[i].getCellInfo());
	  }
       }
    }




    class J{
       Cell[] cells;
       J(int row,int col){
          cells = new Cell[4];
	  cells[0] = new Cell(row,col);
	  cells[1] = new Cell(row,col+1);
	  cells[2] = new Cell(row,col+2);
	  cells[3] = new Cell(row+1,col+2);
       }


    }





    main(){
       T t = new T(1,5);
    }




















int[][] as = new int[3][];
as[0] = new int[4];
System.out.println(as[0][0]);//0




System.out.println(as[0][0]);//错误














as[1][2] = 100;


给as中第2个元素的第3个元素赋值为100



as[0]---int类型
int[] as = new int[4];













//1给arr[0]赋值，2给arr[1]赋值......
int[] arr = {
   1,
   2,
   3,
   4
};
//1给cs[0]赋值，2给cs[1]赋值
Cell[] cs = {
   new Cell(),
   new Cell(5),
   new Cell(5,4),
   new Cell(3,7)
};
System.out.println(cs[1].row);








Cell[] cs = new Cell[4];
cs[0] = new Cell();
cs[1] = new Cell(5,4);
cs[2] = new Cell(3,2);
cs[3] = new Cell(8);






cs[4] = new Cell();  //越界



System.out.println(cs[0].row);  //0










cs[0]=null cs[1]=null ......
Cell[] cs = new Cell[4];
cs[0].row = 5;  //空指针异常









int[] arr = new int[4];
arr[0] = 5;

Cell[] cs = new Cell[4]; //new是在创建数组
cs[0]为Cell类型
cs[0] = new Cell();  //new是在创建Cell对象












new之后，arr中每个元素都是0
int[] arr = new int[4];
boolean[] bs = new boolean[4];

new之后，cs中每个元素都是null
Cell[] cs = new Cell[4];
Student[] ss = new Student[4];

























